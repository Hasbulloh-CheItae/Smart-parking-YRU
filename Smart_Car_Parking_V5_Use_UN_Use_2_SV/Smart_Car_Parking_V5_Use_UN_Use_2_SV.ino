/////////////////////////////////////////////////////////////////////////////////////////
// Smart Car Parking @Yala Rajahat University                                          //
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// ESP32 TB NODE WITHOUT SDK
// -------------------------------------------------------------------------------------
// Developer: PGAS TEAM
//            406559002@yru.ac.th
// Dedicated to Yala Rajabhat University Demonstration School.
// -------------------------------------------------------------------------------------
// Libraries
// - LiquidCrystal I2C | 1.1.2 | by Frank de Brabander
// - ESP32Servo | 3.0.6 | by Kevin Harrington,John K. Bennett
/////////////////////////////////////////////////////////////////////////////////////////

/****************************************************************************************
 * ESP-WROVER-32
 * Tools->Board:"ESP32-WROOM-DA Module"
 * Preferences->Additional boards manager URLs:"https://dl.espressif.com/dl/package_esp32_index.json"
 * Boards manager:"esp32 | 3.1.1 | by Espressif Systems"
 ****************************************************************************************
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Input Only
 * -> VP/36                 = ADC1_CH0 (Analog Input)
 * -> VN/39                 = ADC1_CH3 (Analog Input)
 * -> D34/34                = ADC1_CH6 (Analog Input)
 * -> D35/35                = ADC1_CH7 (Analog Input)
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Digital/Analog ‡πÑ‡∏î‡πâ
 * -> D32/32                = GPIO, ADC1_CH4, Touch8
 * -> D33/33                = GPIO, ADC1_CH5, Touch9
 * -> D25/25                = GPIO, DAC1, ADC2_CH8
 * -> D26/26                = GPIO, DAC2, ADC2_CH9
 * -> D27/27                = GPIO, ADC2_CH7, Touch7
 * -> D14/14                = GPIO, ADC2_CH6, Touch6, SPI SCK
 * -> D12/12                = GPIO, ADC2_CH5, Touch5, SPI MISO (üö® ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏∂‡∏á HIGH ‡∏ï‡∏≠‡∏ô‡∏ö‡∏π‡∏ï)
 * -> D13/13                = GPIO, ADC2_CH4, Touch4, SPI MOSI
 * -> D4/4                  = GPIO, ADC2_CH0, Touch0
 * -> D15/15                = GPIO, ADC2_CH3, Touch3           (üö® ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏∂‡∏á HIGH ‡∏ï‡∏≠‡∏ô‡∏ö‡∏π‡∏ï)
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Digital ‡πÑ‡∏î‡πâ
 * -> D23/23                = GPIO, SPI MOSI
 * -> D22/22                = GPIO, I2C SCL
 * -> D21/21                = GPIO, I2C SDA
 * -> D19/19                = GPIO, SPI MISO
 * -> D18/18                = GPIO, SPI SCK
 * -> D5/5	                = GPIO, SPI CS
 * GND                      = Ground
 * 3V3                      = Power 3.3V ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏ü‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î
 * VIN                      = Power Input (5V) ‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏ü‡πÄ‡∏Ç‡πâ‡∏≤ ESP32 ‡∏´‡∏£‡∏∑‡∏≠ ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏ü‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î
 * ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ
 * -> D0/0                  = GPIO, ADC2_CH1, Touch1           (üö® ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠ Boot Mode)
 * -> D2/2                  = GPIO, ADC2_CH2, Touch2           (üö® ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏°‡∏µ LED ‡∏ö‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î)
 * -> RX0/3                 = UART0 RX                         (üö® ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug Serial)
 * -> TX0/1                 = UART0 TX                         (üö® ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug Serial)
 ****************************************************************************************/

//=======================================================================================
// Ultrasonic sensor HY-SRF05 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 1
//=======================================================================================
// VCC   = +5V DC
// Trig  = ‡∏™‡πà‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏•‡∏ï‡∏£‡∏≤‡πÇ‡∏ã‡∏ô‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
// Echo  = ‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
// GND   = ‡∏Ç‡∏±‡πâ‡∏ß‡∏•‡∏ö‡πÑ‡∏ü(-)
//=======================================================================================
// Transmitter (Trig Pin) = 23
//=======================================================================================
// Receiver (Echo Pin)    = 19
//=======================================================================================

//=======================================================================================
// Ultrasonic sensor HY-SRF05 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 2
//=======================================================================================
// VCC   = +5V DC
// Trig  = ‡∏™‡πà‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏•‡∏ï‡∏£‡∏≤‡πÇ‡∏ã‡∏ô‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
// Echo  = ‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
// GND   = ‡∏Ç‡∏±‡πâ‡∏ß‡∏•‡∏ö‡πÑ‡∏ü(-)
//=======================================================================================
// Transmitter (Trig Pin) = 32
//=======================================================================================
// Receiver (Echo Pin)    = 33
//=======================================================================================

//=======================================================================================
// Servo SG90
//=======================================================================================
// VCC(‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡πÅ‡∏î‡∏á)        = +4.8V..+6V DC
// Signal(‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)   = ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
// GND(‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•)      = ‡∏Ç‡∏±‡πâ‡∏ß‡∏•‡∏ö‡πÑ‡∏ü(-)
//=======================================================================================
// Data(‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á) = 4
//=======================================================================================

//=======================================================================================
// LCD (Blue Screen) 16x2 ‡∏û‡∏£‡πâ‡∏≠‡∏° I2C Interface
//=======================================================================================
// VCC            = +5V DC
// SDA            = Serial Data Line
// SCL            = Serial Clock Line
// GND            = ‡∏Ç‡∏±‡πâ‡∏ß‡∏•‡∏ö‡πÑ‡∏ü(-)
// I2C Address    = 0X27
//=======================================================================================
// SDA = 21
//=======================================================================================
// SCL = 22
//=======================================================================================


/////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
/////////////////////////////////////////////////////////////////////////////////////////
#include <LiquidCrystal_I2C.h>  //->‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏à‡∏≠ LCD ‡∏ú‡πà‡∏≤‡∏ô I2C (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö ESP32)
#include <ESP32Servo.h>         //->‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö servo (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö ESP32)
/////////////////////////////////////////////////////////////////////////////////////////
// DEFINES
/////////////////////////////////////////////////////////////////////////////////////////

//=======================================================================================
// Initialize hardware setup : Ultrasonic sensor HY-SRF05
//=======================================================================================
#define TrigPin_Un1 23
#define EchoPin_Un1 19
#define TrigPin_Un2 32
#define EchoPin_Un2 33
//=======================================================================================
// End of hardware setup : Ultrasonic sensor HY-SRF05
//=======================================================================================

//=======================================================================================
// Initialize hardware setup : LED
//=======================================================================================
#define LED_RED_PIN 13
#define LED_GREEN_PIN 14
//=======================================================================================
// End of hardware setup : LED
//=======================================================================================

//=======================================================================================
// Initialize hardware setup : LCD
//=======================================================================================
#define I2C_ADDR 0x27   // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà I2C ‡∏Ç‡∏≠‡∏á‡∏à‡∏≠ LCD
#define LCD_COLUMNS 16  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô) ‡∏Ç‡∏≠‡∏á LCD
#define LCD_ROWS 2      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏ñ‡∏ß (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á) ‡∏Ç‡∏≠‡∏á LCD
LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLUMNS, LCD_ROWS);
//=======================================================================================
// End of hardware setup : LCD
//=======================================================================================

//=======================================================================================
// Initialize hardware setup : SERVO
//=======================================================================================
#define SERVO_IN_PIN 4
#define SERVO_OUT_PIN 27
Servo myServo_In;  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå servo
Servo myServo_Out;  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå servo
//=======================================================================================
// End of hardware setup : SERVO
//=======================================================================================

/////////////////////////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
/////////////////////////////////////////////////////////////////////////////////////////
// Ultrasonic sensor
int duration_Un1;  // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏•‡∏ï‡∏£‡∏≤‡πÇ‡∏ã‡∏ô‡∏¥‡∏Å
int duration_Un2;
float distance_Un1;  // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
float distance_Un2;
// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
unsigned int number_car = 0;
// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏´‡∏°
bool objectDetected = false;
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)
const int OBJECT_THRESHOLD = 20;
// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
const int MAX_CAR_PARKING = 5;

/////////////////////////////////////////////////////////////////////////////////////////
// SETUP ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
/////////////////////////////////////////////////////////////////////////////////////////
void setup() {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Serial Monitor ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß 115200
  Serial.begin(115200);
  pinMode(TrigPin_Un1, OUTPUT);  // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
  pinMode(EchoPin_Un1, INPUT);   // ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
  pinMode(TrigPin_Un2, OUTPUT);
  pinMode(EchoPin_Un2, INPUT);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô LCD
  lcd.init();       // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á LCD
  lcd.backlight();  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏≠ LCD

  pinMode(LED_RED_PIN, OUTPUT);
  pinMode(LED_GREEN_PIN, OUTPUT);

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô LCD
  lcd.setCursor(0, 0);                                          //  ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á (0 ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å, 0 ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
  lcd.print("SMART PARKING");                                   // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å
  lcd.setCursor(0, 1);                                          // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (0 ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å, 1 ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á)
  lcd.print("EMPTY: " + String(MAX_CAR_PARKING - number_car));  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏≠‡∏á
  delay(1000);

  myServo_In.attach(SERVO_IN_PIN);
}
/////////////////////////////////////////////////////////////////////////////////////////
// LOOP ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
/////////////////////////////////////////////////////////////////////////////////////////
void loop() {
  // UN 1
  // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ TRIG_PIN ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LOW ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 2 ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
  digitalWrite(TrigPin_Un1, LOW);
  delayMicroseconds(2);
  // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ TRIG_PIN ‡πÄ‡∏õ‡πá‡∏ô HIGH ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10 ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì HIGH ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏•‡∏ï‡∏£‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
  digitalWrite(TrigPin_Un1, HIGH);
  delayMicroseconds(10);
  // ‡∏î‡∏∂‡∏á TRIG_PIN ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô LOW ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô
  digitalWrite(TrigPin_Un1, LOW);

  // ‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ú‡πà‡∏≤‡∏ô ECHO_PIN
  duration_Un1 = pulseIn(EchoPin_Un1, HIGH);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)
  distance_Un1 = duration_Un1 * 0.034 / 2;

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô Serial Monitor
  Serial.print("Distance_Un1: ");
  Serial.print(distance_Un1);
  Serial.println(" cm");
  delay(500);  // ‡∏£‡∏≠ 500ms ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
  // ----------------------------------------------
  // UN 2
  // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ TRIG_PIN ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LOW ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 2 ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
  digitalWrite(TrigPin_Un2, LOW);
  delayMicroseconds(2);
  // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ TRIG_PIN ‡πÄ‡∏õ‡πá‡∏ô HIGH ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10 ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì HIGH ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏•‡∏ï‡∏£‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
  digitalWrite(TrigPin_Un2, HIGH);
  delayMicroseconds(10);
  // ‡∏î‡∏∂‡∏á TRIG_PIN ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô LOW ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô
  digitalWrite(TrigPin_Un2, LOW);

  // ‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ú‡πà‡∏≤‡∏ô ECHO_PIN
  duration_Un2 = pulseIn(EchoPin_Un2, HIGH);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)
  distance_Un2 = duration_Un2 * 0.034 / 2;

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô Serial Monitor
  Serial.print("Distance_Un2: ");
  Serial.print(distance_Un2);
  Serial.println(" cm");
  delay(500);  // ‡∏£‡∏≠ 500ms ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
  // ----------------------------------------------
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ 20 cm ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏à‡∏≤‡∏Å Un1 ‡∏´‡∏£‡∏∑‡∏≠ Un2)
  if ((distance_Un1 > 0 && distance_Un1 < OBJECT_THRESHOLD) || (distance_Un2 > 0 && distance_Un2 < OBJECT_THRESHOLD)) {
    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡∏≥‡πà (‡∏á‡πà‡∏≤‡∏¢‡πÜ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏ñ 1 ‡∏Ñ‡∏±‡∏ô‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1)
    if (!objectDetected) {
      objectDetected = true;
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞ ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ ‡∏£‡∏ñ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á
      if ((distance_Un1 > 0 && distance_Un1 < OBJECT_THRESHOLD) && number_car < MAX_CAR_PARKING) {
        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ +1
        number_car++;
        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü LED GREEN 1 ‡∏ß‡∏¥
        digitalWrite(LED_GREEN_PIN, HIGH);
        delay(1000);
        digitalWrite(LED_GREEN_PIN, LOW);
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô LCD
        lcd.noBacklight();
        lcd.setCursor(0, 0);
        lcd.print("SMART PARKING");
        lcd.setCursor(0, 1);
        lcd.print("EMPTY: " + String(MAX_CAR_PARKING - number_car));
        lcd.backlight();
        delay(1000);
        // Servo ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π
        Serial.println("Opening gate...");
        myServo_In.write(90);
        delay(3000);
        myServo_In.write(0);
        delay(1000);
        Serial.println("Closing gate...");
      }
      // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á
      if (number_car == MAX_CAR_PARKING) {
        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü LED RED ‡∏ï‡∏•‡∏≠‡∏î‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ
        digitalWrite(LED_RED_PIN, HIGH);
        lcd.noBacklight();
        lcd.setCursor(0, 0);
        lcd.print("SMART PARKING");
        lcd.setCursor(0, 1);
        lcd.print("EMPTY: MAX");
        lcd.backlight();
        delay(1000);
      }
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á
      if ((distance_Un2 > 0 && distance_Un2 < OBJECT_THRESHOLD) && number_car > 0) {
        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ -1
        number_car--;
        digitalWrite(LED_RED_PIN, LOW);
        digitalWrite(LED_GREEN_PIN, HIGH);
        delay(1000);
        digitalWrite(LED_GREEN_PIN, LOW);
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô LCD
        lcd.noBacklight();
        lcd.setCursor(0, 0);
        lcd.print("SMART PARKING");
        lcd.setCursor(0, 1);
        lcd.print("EMPTY: " + String(MAX_CAR_PARKING - number_car) + "  ");
        lcd.backlight();
        delay(1000);
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô Serial Monitor
        Serial.println("Opening gate...");
        myServo_Out.write(90);
        delay(3000);
        myServo_Out.write(0);
        delay(1000);
        Serial.println("Closing gate...");
      }
    }
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  } else {

    objectDetected = false;
  }
}
